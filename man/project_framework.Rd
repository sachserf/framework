% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project_framework.R
\name{project_framework}
\alias{project_framework}
\title{Initialize a framework-project}
\usage{
project_framework(project_dir, devtools_create = FALSE, rstudio = TRUE,
  init_git = TRUE, init_packrat = FALSE, input_files = c("prepare.R",
  "visualize.Rmd"), pkg_cran_install = c("utils", "tools", "rmarkdown",
  "knitr", "rstudioapi"), pkg_cran_load = c("tidyverse"),
  pkg_gh_install = NULL, pkg_gh_load = NULL, input_dir = "files",
  data_dir = "data/in", cache_dir = ".cache", fun_dir = "R",
  spin_index = 0, cache_index = 999, symlink_dir_input = "in",
  symlink_dir_docs = "out/docs", symlink_dir_figure = "out",
  rename_symlink_input = TRUE, rename_symlink_docs = TRUE,
  rename_symlink_figure = TRUE, rebuild_figures = TRUE,
  Rplots_device = "grDevices::png", target_dir_data = "data/out",
  listofdf = "GlobalEnv", data_extension = "RData",
  rebuild_target_dir_data = TRUE,
  filepath_session_info = "meta/session_info.txt",
  filepath_log = "meta/log.csv", filepath_tree = "meta/tree.txt",
  filepath_warnings = "meta/warnings.Rout", tree_directory = "getwd()",
  include_hidden_tree = FALSE, filepath_pkg_bib = "meta/pkg.bib",
  filepath_image = ".RData", autobranch = NULL, quiet_processing = TRUE,
  summarize_session_info = FALSE, summarize_df = FALSE,
  summarize_memory = FALSE, summarize_log = FALSE, summarize_git = TRUE,
  summarize_tree = FALSE, summarize_warnings = FALSE)
}
\arguments{
\item{project_dir}{Character. Specify the path to the directory where you
want to create a new project. The last directory will be the top level of the project and additionally the name of your project. E.g. '~/Desktop/MyProject' will create a project called 'MyProject'.}

\item{devtools_create}{Logical. Choose TRUE if you want to call
'devtools::create()' in order to prepare your project as an R-package. You
might want to choose appropriate paths for other variables (e.g. fun_dir =
'R', data_dir = inst/extdata, and so on). See alias 'package}

\item{rstudio}{Logical. TRUE calls the function Rproj_init.}

\item{init_git}{Logical. TRUE calls the function git_init.}

\item{init_packrat}{Logical. TRUE initializes a packrat repo.}

\item{input_files}{character vector. File paths to your input files. Should
be found within the directory 'input dir'. Use file extension 'R' or 'Rmd'.}

\item{pkg_cran_install}{Character vector. Package names that should be
installed from your default cran mirror.}

\item{pkg_cran_load}{Character vector. Package names that should be installed
from your default cran mirror and additionally loaded.}

\item{pkg_gh_install}{Character vector. Package names that should be
installed from github. Depends on the package 'devtools'.}

\item{pkg_gh_load}{Character vector. Package names that should be installed
from github and additionally loaded. Depends on the package 'devtools'.}

\item{input_dir}{Character. Source directory for your input_files.}

\item{data_dir}{Character. Source directory for raw data. This directory will
be monitored. When files change in this directory the cache will be ignored
(when using the framework template of the file 'make.R').}

\item{cache_dir}{Character. Directory for the cache.}

\item{fun_dir}{Character. Directory for user-written functions. When using
the framework template of the file 'make.R' all R-Scripts (functions)
within this directory will be attached to a predefined environment.}

\item{spin_index}{Integer vector. Subset of input_files that should be
spinned. Files extensions other than '.R' will be ignored. (0 = none, 999 =
all)}

\item{cache_index}{Integer vector. Subset of input_files that should be
cached. (0 = none, 999 = all)}

\item{symlink_dir_input}{Character. Target directory for symbolic links to
input_files. Should betreated as read-only.}

\item{symlink_dir_docs}{Character. Target directory for symbolic links to
rendered files. Should betreated as read-only.}

\item{symlink_dir_figure}{Character. Target directory for symbolic links to
rendered figures. Should betreated as read-only.}

\item{rename_symlink_input}{Logical. Preserve directory structure and
filename or collapse directories and rename symbolic links.}

\item{rename_symlink_docs}{Logical. Preserve directory structure and filename
or collapse directories and rename symbolic links.}

\item{rename_symlink_figure}{Logical. Preserve directory structure and
filename or collapse directories and rename symbolic links.}

\item{rebuild_figures}{Logical. Delete figures before rendering. Choose FALSE
if you want to use knitr::cache.}

\item{Rplots_device}{Character. Function that should be passed to write
figures of R-files if sourced. E.g. 'grDevices::pdf' or 'grDevices::png'. Choose NULL if you want to write figures manually (e.g. using ggsave for ggplot2-graphics).}

\item{target_dir_data}{Character. Target directory for data.}

\item{listofdf}{Character vector. Specify a vector of dataframes to write. Choose 'GlobalEnv' to write all data frames currently inside your global environment.}

\item{data_extension}{Character. Specify file extension for data frames. Possible values: 'csv', 'RData' and 'rds'.}

\item{rebuild_target_dir_data}{Logical. Delete target_dir_data before writing current data frames.}

\item{filepath_session_info}{Character. Specify file path to write the session info file.}

\item{filepath_log}{Character. Specify file path to write the log file.}

\item{filepath_tree}{Character. Specify file path to write the tree file.}

\item{filepath_warnings}{Character. Specify file path to write the warnings file.}

\item{tree_directory}{Character. Specify input directory as top level for the tree.}

\item{include_hidden_tree}{Logical. Include/Exclude hidden directories and files to build the tree.}

\item{filepath_pkg_bib}{Character. Target filepath to write bib-file of packages. See ?knitr::write_bib()}

\item{filepath_image}{Character. Target filepath to write final image.}

\item{autobranch}{Character. Specify the name of an existing branch. Only if HEAD is pointing to this branch an auto-snapshot will be created. Exception: Choose NULL (default) to ignore branch-dependency.}

\item{quiet_processing}{Logical. Specify if processing of files should be
quiet.}

\item{summarize_session_info}{Logical. Should session info be printed to console?}

\item{summarize_df}{Logical. Should a list of written data frames be printed to console?}

\item{summarize_memory}{Logical. Should memory usage be printed to console?}

\item{summarize_log}{Logical. Should a summary of the log file be printed to console? Depends on dplyr.}

\item{summarize_git}{Logical. If TRUE git2r::summary() will be called.}

\item{summarize_tree}{Logical. Should the directory structure (tree) be printed to console?}

\item{summarize_warnings}{Logical. Should filepath_warnings be printed to console?}
}
\description{
This function is probably the only function of the whole package
  'framework' you need to call by hand. It is a wrapper for skeleton,
  Rproj_init and git_init. Therefore it is straightforward to create a new
  project, change the working directory, generate basic directories/files and
  initialize a git repository. Optionally you can initialize a packrat repo.
}
\note{
Creation of the project_dir is recursive.
}
\seealso{
\code{\link{skeleton}}, \code{\link{package}}
}
\author{
Frederik Sachser
}
