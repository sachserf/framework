% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project_framework.R
\name{project_framework}
\alias{project_framework}
\title{Initialize a framework-project}
\usage{
project_framework(project_dir, rstudio = TRUE, init_git = TRUE,
  init_packrat = FALSE, custom_makeR = NULL, target_makeR = "make.R",
  fun_dir = "in/fun", source_files = c("load.R", "report.Rmd"),
  cache_dir = ".cache", source_dir = "in/src", data_dir = "in/data",
  target_dir_figure = "out/figure", target_dir_docs = "out/docs",
  target_dir_data = "out/data", devtools_create = FALSE)
}
\arguments{
\item{project_dir}{Character. Specify the path to the directory where you want to
create a new project. The last directory will be the project directory
itself. The name of the project will be the name of the project directory.
E.g. '~/Desktop/MyProject' will create a project directory on your desktop.}

\item{init_git}{Logical. TRUE calls the function git_init.}

\item{init_packrat}{Logical. TRUE initializes a packrat repo.}

\item{custom_makeR}{Character. File path to a local make-like R-file. Specify
this option if you want to use a customized version instead of the template
for the file 'make.R'.}

\item{init_Rproj}{Logical. TRUE calls the function Rproj_init.}
}
\description{
This function is the heart of the package framework and it is
  probably the only one you need to call by hand. Furthermore it is a wrapper
  for skeleton, Rproj_init and git_init. Therefore it is straightforward to
  create a new project, change the working directory, generate basic
  directories and initialize a git repository. Optionally you can initialize
  a packrat repo.
}
\note{
Creation of the project_dir is recursive.

After calling the function go to the project directory and open the
  .Rproj file with RStudio.
}
\author{
Frederik Sachser
}
\seealso{
\code{\link{Rproj_init}}, \code{\link{git_init}},
  \code{\link{skeleton}}
}

